AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Template EKSCompleteCluster:
  Crea un cluster completo de eks con autoscalling y todos los recursos necesarios'
Parameters:
  idvpc:
    Description: Nombre del cluster de EKS
    Type: String
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: "vpc-0c97650440ec1b6d9"

  Nombre:
    Description: Llave para conección de los nodos de trabajo del cluster
    Type: String
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  publicsubnet0:
    Default: subnet-03e1ee9756f788156
    Type: String
  publicsubnet1:
    Default: subnet-0396f0c3c4f0fbdfb
    Type: String
  privatesubnet0:
    Default: subnet-04e1747a21b27380d
    Type: String
  privatesubnet1:
    Default: subnet-0a95803e393587b14
    Type: String

Resources:
### CONFIGURACIÓN VPC Y SUBNETS#######---------------------------------------------------------------
####RECURSOS EKS########################--------------------------------------------------------------
  #service role para eks
  EksServiceRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "eks.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
      RoleName: !Join ['-',['EksSvcRole', !Ref Nombre]]
  
  #Rol para los nodos
  EksNodeRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      RoleName: !Join ['-',['EksNodeRole', !Ref Nombre]]

  #policy para el ingresscontroller de eks a ALB
  controllerPolicy:  
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: root
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - "ec2:*"
              - "elasticloadbalancing:*"
            Resource: '*'
      Roles:
        - !Ref EksNodeRole
  #sec group que permite a los nodos worker comunicarse con el control plane 
  DataPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: worker nodes to control plane
        VpcId:
          Ref: idvpc
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.3.0/24
        - IpProtocol: tcp
          FromPort: 10250
          ToPort: 10250
          CidrIp: 10.0.3.0/24
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.4.0/24
        - IpProtocol: tcp
          FromPort: 10250
          ToPort: 10250
          CidrIp: 10.0.4.0/24
  ##Definicion del cluster
  myCluster:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: !Join ['-',['cluster', !Ref Nombre]]
      Version: '1.21'
      RoleArn: !GetAtt EksServiceRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref DataPlaneSecurityGroup
        SubnetIds:
          - !Ref privatesubnet0
          - !Ref privatesubnet1

  vpcCni:
    Type: AWS::EKS::Addon
    Properties: 
      AddonName: "vpc-cni"
      AddonVersion: "v1.7.5-eksbuild.2"
      ClusterName: !Ref myCluster
      ResolveConflicts: "OVERWRITE"
      Tags: 
        - Key: 'project'
          Value: 'eksdemo'

  #Nodos de trabajo del cluster#
  EKSNodegroup:
    Type: 'AWS::EKS::Nodegroup'
    Properties:
      ClusterName: !Ref myCluster
      NodeRole:  !GetAtt EksNodeRole.Arn
      AmiType: AL2_x86_64
      CapacityType: "ON_DEMAND"
#      RemoteAccess:
#        Ec2SshKey: !If [DeploySSH, !Ref InstancesKey, !Ref AWS::NoDefault]
      InstanceTypes: 
        - t3.medium
      Labels:
        Project: aws-eks-demo
      ScalingConfig:
        MinSize: 2
        DesiredSize: 2
        MaxSize: 3
      Subnets:
        - !Ref publicsubnet0
        - !Ref publicsubnet1
      Tags:
        Name: !Join ['-',['eksdemo-cluster-nodegroup', !Ref Nombre]]
        kubernetes.io/cluster/eksdemo-cluster: owned            
#Outputs:
  